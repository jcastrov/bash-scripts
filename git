#!/usr/bin/env bash

git_restore='git restore';
git_restore_f='git restore .';
git_switch='git switch';
git_switch_c='git switch -C';

# - Get the git version
#       $(eval "git --version") ➡️  git version 2.25.0
# - Extract the first pair of numbers with a regular expression
#       =~ ([0-9]{1}.[0-9]{2}) ➡️  2.25
[[ $(eval "git --version") =~ ([0-9]{1}.[0-9]{2}) ]];

# - Remove the decimal separator   | tr -d . ➡️  225
# - Check if the extracted number is lower than 223
if [[ $(eval 'echo "${BASH_REMATCH[1]}" | tr -d .') -lt 223 ]]; then
  git_restore='git checkout';
  git_restore_f='git checkout -f';
  git_switch='git checkout';
  git_switch_c='git checkout -B';
fi

# Checks if a branch exists.
#     $1: Branch name
__branch_exists() {
  set_cmd_value "$1";
  [ -z "$__cmd_value" ] && { __mw "Branch `__c $3 6` doesn't exist `__c "$2" 5`."; return 1; }
  __mo "Branch `__c $3 6` exists $2";
  return 0;
}

# Checks if a branch on remote exists.
#     $1: Branch name
branch_locally_exists() {
  has_parameters $@ || return 1;
  __branch_exists "git show-ref refs/heads/$1" "locally" $1 || return 1;
}

# Checks if a branch locally exists.
#     $1: Branch name
branch_on_remote_exists() {
  has_parameters $@ || return 1;
  __branch_exists "git ls-remote --heads origin refs/heads/$1 | grep $1" "on remote" $1 || return 1;
}

# Gets the name of the current branch on the current directory.
get_current_branch() {
  cmd_exists git || return 1;
  set_cmd_value "git branch | grep \* | cut -d ' ' -f2" || return 1;
  __mi "Current branch: `__c $__cmd_value 6`";
  return 0;
}

# Gets the URL of the repository. Make sure your directory and parent directory
# have the name of the URL of the repo. For instance, if your repo is
# https://github.com/microsoft/vscode, the root directory name must be "vscode"
# and its parent "microsoft".
get_repo_url() {
  echo "https://github.com/$(basename $(dirname "$PWD"))/$(basename "$PWD")";
}

# Adds files and shows a quick status
gita() {
  has_parameters $@ || return 1;
  run_cmd "git add $1";
  run_cmd "git status -s"
}

# Deletes a branch locally
gitbD() {
  branch_locally_exists $1 || return 1;
  question "Are you sure to force delete `__c $1 1` locally?"
  [ $? != 0 ] && return 0;
  run_cmd "$git_switch `git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'`";
  run_cmd "git branch -D $1";
}

# Commits your changes
#    $1: Summary.
#    $2 (optional): Description.
gitc() {
  has_parameters $@ || return 1;
  get_current_branch || return 1;
  local commit_cmd="git commit -m \"$__cmd_value: $1\"";
  [ -n "$2" ] && { commit_cmd="$commit_cmd -m \"$2\""; }
  __mi "Committing your changes.";
  run_cmd "$commit_cmd" || return 1;
}

# Cherry pick commands
gitchp() { run_cmd "git cherry-pick $1"; }
gitchpa() { run_cmd "git cherry-pick --abort"; }
gitchpc() { run_cmd "git cherry-pick --continue"; }

# Fetches branches
gitf() { run_cmd "git fetch -p"; }

# Merge commands
gitm() { run_cmd "git merge $1"; }
gitma() { run_cmd "git merge --abort"; }
gitmc() { run_cmd "git merge --continue"; }
gitmo() { run_cmd "git merge origin/$1"; }

# Opens remote on the browser with the current branch. If $1 is specified,
# $1 will be the displayed branch.
#     $1 (optional): Branch name
gito() {
  is_git_directory && local branch=$1 || return 1;
  [ -z "$1" ] && get_current_branch && branch=$__cmd_value;
  run_cmd "open `get_repo_url`/tree/$branch";
}

# Opens a specific file on remote for the current branch. If $2 is specified,
# $2 will be the selected branch.
#     $1: Relative path of the file
#     $2 (Optional): Branch name 
gitof() {
  is_git_directory && has_parameters $@ && local branch=$2 || return 1;
  [ -z "$2" ] && get_current_branch && branch=$__cmd_value;
  run_cmd "open `get_repo_url`/blob/$branch/$1";
}

# Pull commands
gitpl() { run_cmd "git pull"; }
gitplr() { run_cmd "git pull -r"; }

# Compares the source branch (Current branch) with the destination branch ($1)
# on the repo URL. If $2 is specified, $2 will be the source branch instead.
#     $1: Destination branch
#     $2 (Optional): Source branch
gitprc() { 
  is_git_directory && has_parameters $@ || return 1;
  local source_branch=$2;
  [ -z "$2" ] && { get_current_branch || return 1 && source_branch=$__cmd_value; }
  run_cmd "open `get_repo_url`/compare/$1...$source_branch"
}

# Searches for pull requests on the repo URL, where the source branch is the
# current branch. If #1 is specified, $1 will be the search text.
#     $1 (Optional): Search text
gitprf() {
  is_git_directory || return 1;
  local search_text=$1;
  [ -z "$1" ] && { get_current_branch || return 1; search_text="head:$__cmd_value"; }
  run_cmd "open `get_repo_url`/pulls?q=$search_text"
}

# Pushes a branch
gitps() { run_cmd "git push"; }

# Deletes a branch on remote.
#     $1: Branch name
gitpsd() {
  is_git_directory && has_parameters $@ || return 1;
  branch_on_remote_exists $1 && {
    question "Are you sure to delete `__c $1 1` `__c "on remote" 3`?";
    [ $? == 0 ] && { run_cmd "git push origin --delete $1"; }
  }
}

# Pushes a branch forcefully
gitpsf() { __run "git push --force-with-lease"; }

# Pushes a branch forcefully fixing the upstream
gitpsfu() {
  get_current_branch && run_cmd "git push --force-with-lease --set-upstream origin $__cmd_value";
}

# Renames the current branch locally and on remote.
#     $1: New branch name
gitpsm() {
  get_current_branch && local current_branch=$__cmd_value || return 1;
  branch_on_remote_exists $__cmd_value || return 1;
  question "Are you sure to change the name from `__c $current_branch 1` to `__c $1 2`?"
  [ $? != 0 ] && return 0;
  run_cmd "git branch -m $1" &&
  run_cmd "git push origin :$current_branch $1" &&
  run_cmd "git push origin --set-upstream $1";
}

# Pushes a branch for the first time
gitpsu() { get_current_branch && run_cmd "git push --set-upstream origin $__cmd_value"; }

# Rebase commands
gitrb() { run_cmd "git rebase $@"; }
gitrbm() { gitrb origin/master; }
gitrba() { gitrb --abort; }
gitrbc() { gitrb --continue; }
gitrbi() { gitrb -i $@; }
gitrbih() { gitrbi HEAD~$1; }
gitrbio() { gitrbi origin/$1; }
gitrbq() { gitrb --quit; }
gitrbs() { gitrb --skip; }

# Reset commands
gitrs() { run_cmd "git reset $@"; }
gitrsh() { run_cmd "git reset --hard $1"; }
gitrsho() { run_cmd "git reset --hard origin/$1"; }

# Restore command
gitrt() {
  [[ $1 != "." ]] && run_cmd "$git_restore $@" && return 0;
  __option "Are you sure to restore all your modified files?"
  [ $? == 0 ] && __run "$git_restore_f";
}

# Status commands
gits() { run_cmd "git status"; }
gitss() { run_cmd "git status -s"; }

# Stash commands
gitsh() { run_cmd "git stash $@"; }
gitsha() { run_cmd "git stash apply"; }
gitshas() { run_cmd "git stash apply stash@{\"$1\"}"; }
gitshcl() { run_cmd "git stash clear"; }
gitshl() { run_cmd "git stash list"; }
gitshp() { run_cmd "git stash pop"; }
gitshps() { run_cmd "git stash save \"$1\""; }
gitshu() { run_cmd "git stash --include-untracked \"$1\""; }

# Switches or creates a branch from the current branch. If $2 is specified and
# the branch doesn't exist, $1 will be created from $2 instead. 
#     $1: Branch to switch or create
#     $2 (Optional): Branch or SHA Start point
gitsw() {
  has_parameters $@ || return 1;
  [ "$1" == "-" ] && { run_cmd "$git_switch -"; return 0; }
  branch_locally_exists $1 && { run_cmd "$git_switch $1"; return 0; }
  branch_on_remote_exists $1 && {
    question "Do you want to switch to the `__c $1 3` remote branch?";
    [ $? == 0 ] && { run_cmd "git fetch"; run_cmd "$git_switch $1"; return 0; }
  }
  local start_point=$2;
  [ -z "$2" ] && { get_current_branch && start_point="$__cmd_value" || return 1; }
  question "Do you want to create `__c $1 2` branch from `__c $start_point 6`?";
  [ $? != 0 ] && return 0;
  run_cmd "$git_switch_c $@";
}

# Checks if the current directory or a specific one is inside a Git repostory.
#     $1 (optional): Directory path to validate
is_git_directory() {
  (cd ${1:-.}; [[ $(eval "git rev-parse --is-inside-work-tree") == "true" ]] && return 0 || return 1);
  return $?;
}
