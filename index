#!/usr/bin/env bash

source "$(dirname "${BASH_SOURCE[0]}")/git"

# Color a string
#     $1: String.
#     $2: Number of the color.
#         0:black | 1:red     | 2:green | 3:yellow
#         4:blue  | 5:magenta | 6:cyan  | 7:gray
__c() { printf "%s" "$(tput setaf ${2:-7})${1}$(tput sgr0)"; }

# Prints a message with an Error label at the start, and a new line at the end.
__me() { printf "`__c "[Error]" 1` $@\n"; }

# Prints a message with an Info label at the start, and a new line at the end.
__mi() { printf "`__c "[Info]" 4` $@\n"; }

# Prints a message with an Ok label at the start, and a new line at the end.
__mo() { printf "`__c "[Ok]" 2` $@\n"; }

# Prints a message with a Warning label at the start, and a new line at the end.
__mw() { printf "`__c "[Warning]" 3` $@\n"; }

br() {
  __mi "Applying new changes";
  run_cmd ". $(dirname "${BASH_SOURCE[0]}")/index";
}

# Checks if a command is avaiable in your current session. Returns 0 if
# the command exists. Otherwise, shows an error message and returns 1 if 
# the command doesn't exist.
#     $1: Command.
cmd_exists() {
  if ! command -v $1 &> /dev/null; then 
    __me "`__c $1 6` command doesn't exist.";
    return 1;
  fi 
}

# Enables Brew on the current terminal session.
ebrew() {
  eval "$(/opt/homebrew/bin/brew shellenv)"
}

# Enables NVM on the current terminal session.
envm() {
  run_brew;
  export NVM_DIR=~/.nvm
  source $(brew --prefix nvm)/nvm.sh
}


# Checks if a function has parameters. Returns 0 if there are paramters. 
# Otherwise returns 1.
#     $@: Parameters
has_parameters() {
  if [ $# -eq 0 ]; then
    __me "Missing parameters."; 
    return 1;
  fi
  return 0;
}

# Prints a string with a light black foreground.
print_cmd() { 
  # awk $1=$1 removes extra spaces
  printf "\033[1;30m$ %s\n" "`echo "$@" | awk '$1=$1'`$(tput sgr0)"; 
}

question() {
  # https://stackoverflow.com/a/3232082/1054579
  read -r -p "`__c [Question] 5` $1 [y/`__c N 6`] " __response;
  [[ "$__response" =~ ^([yY][eE][sS]|[yY])$ ]] && return 0;
  return 1;
}

# Prints and runs a command, setting its value to $__cmd_value.
#     $@: Command.
set_cmd_value() {
  print_cmd $@;
  # "eval" runs commands with pipes: https://stackoverflow.com/a/48098280/1054579
  __cmd_value=$(eval $@);
  [ -z "$__cmd_value" ] && return 1;
  return 0;
}

# Prints and runs a command.
#     $@: Command.
run_cmd() {
  print_cmd $@;
  eval $@;
  return $?;
}
