#!/usr/bin/env bash

C_BlACK=0;
C_RED=1;
C_GREEN=2;
C_YELLOW=3;
C_BLUE=4;
C_MAGENTA=5;
C_CYAN=6;
C_GRAY=7;

# Scripts path depends on the current shell.
local scripts_path=$(dirname "${BASH_SOURCE[0]}");
if [[ -n $ZSH_VERSION ]]; then
  scripts_path=${0:A:h};
fi;

source "$scripts_path/git"
source "$scripts_path/git_utils"
source "$scripts_path/windows"


# Colors a string ($1) with a number ($2)
__c() { printf "%s" "$(tput setaf ${2:-7})${1}$(tput sgr0)"; }

color_black() { printf "`__c "$1" 0`"; }
color_red() { printf "`__c "$1" 1`"; }
color_green() { printf "`__c "$1" 2`"; }
color_yellow() { printf "`__c "$1" 3`"; }
color_blue() { printf "`__c "$1" 4`"; }
color_magenta() { printf "`__c "$1" 5`"; }
color_cyan() { printf "`__c "$1" 6`"; }
color_gray() { printf "`__c "$1" 7`"; }

print_error() { printf "`color_red "[Error]"` $@\n"; }
print_info() { printf "`color_blue "[Info]"` $@\n"; }
print_ok() { printf "`color_green "[Ok]"` $@\n"; }
print_warning() { printf "`color_yellow "[Warning]"` $@\n"; }

echo_regex_substring() {
  local substring=$(echo "$1" | grep -oE "$2");
  if [[ -z $substring ]]; then
    return 1;
  fi
  echo "$substring";
}

br() {
  print_info "Applying new changes";
  run_cmd ". $(dirname "${BASH_SOURCE[0]}")/index";
}

# Checks if a command is avaiable in your current session. Returns 0 if
# the command exists. Otherwise, shows an error message and returns 1 if 
# the command doesn't exist.
#     $1: Command.
cmd_exists() {
  if ! command -v $1 &> /dev/null; then 
    print_error "`color_cyan $1` command doesn't exist.";
    return 1;
  fi 
}

__is_cmd_enabled() {
  cmd_exists $1 > /dev/null 2>&1 && print_info "`color_cyan $1` command is already enabled.";
}
# Enables Brew on the current terminal session.
ebrew() {
  __is_cmd_enabled brew && return 1;
  run_cmd "$(/opt/homebrew/bin/brew shellenv)";
  run_cmd "brew --version";
}

# Enables NVM on the current terminal session.
envm() {
  __is_cmd_enabled nvm && return 1;
  ebrew;
  run_cmd "export NVM_DIR=~/.nvm";
  run_cmd "source $(brew --prefix nvm)/nvm.sh";
  run_cmd "node --version";
}

epython() {
  __is_cmd_enabled python && return 1;
  ebrew;
  export PYENV_ROOT="$HOME/.pyenv"
  command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
  pyenv global 2;
  run_cmd "which python";
  run_cmd "python --version";
}


echo_jira_ticket_url() {
  echo "https://$BP_JIRA_ORGANIZATION.atlassian.net/browse/$1";
}

# Checks if a function has parameters. Returns 0 if there are paramters. 
# Otherwise returns 1.
#     $@: Parameters
has_parameters() {
  if [ $# -eq 0 ]; then
    print_error "Missing parameters."; 
    return 1;
  fi
  return 0;
}

jira() {
  local branch=$1;
  [ -z "$1" ] && { 
    ! is_git_directory && return 1;
    branch=$(echo_current_branch);
  }
  [[ $branch =~ (^[A-Za-z]*-[0-9]*) ]] || {
    print_error "Branch `color_yellow $branch` is not a valid ticket name.";
    return 1;
  }
  
  run_cmd "open $(echo_jira_ticket_url ${BASH_REMATCH[1]})";
}

# Prints a string with a light black foreground.
print_cmd() { 
  # awk $1=$1 removes extra spaces
  printf "\033[1;30m$ %s\n" "`echo "$@" | awk '$1=$1'`$(tput sgr0)"; 
}

question() {
  # https://stackoverflow.com/a/3232082/1054579
  read -r -p "`color_magenta [Question]` $1 [y/`color_cyan N`] " __response;
  [[ "$__response" =~ ^([yY][eE][sS]|[yY])$ ]] && return 0;
  return 1;
}

# Prints and runs a command ($1).
# (Optional) Assigns the output to a variable name without "$" ($2)
run_cmd() {
  print_cmd "$1";
  if [[ $# == 1 ]]; then
    # "eval" runs commands with pipes: https://stackoverflow.com/a/48098280/1054579
    eval $1;
  else
    eval "$2=\"$(eval $1)\""
  fi

  return $?;
}

# Opens VSCode for the current directory. If $1 is specified, VSCode opens for
# the root of the git repository, or that path.
vsc() {
  local path="${1:-.}";
  local type="directory";
  is_git_directory "$path" > /dev/null 2>&1 && {
    path=$(cd $path; echo `git rev-parse --show-toplevel`;) 
    type=`color_magenta "repository"`;
  }
  local directory="$(basename "`cd "$path"; pwd`")";
  print_info "Opening $(__c "$directory" 6) $type on VSCode.";
  run_cmd "code \"$path\"";
}
