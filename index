#!/usr/bin/env bash

C_BlACK=0;
C_RED=1;
C_GREEN=2;
C_YELLOW=3;
C_BLUE=4;
C_MAGENTA=5;
C_CYAN=6;
C_GRAY=7;

source "$(dirname "${BASH_SOURCE[0]}")/git_aliases"

# Colors a string
#     $1: String.
#     $2: Number of the color.
__c() { printf "%s" "$(tput setaf ${2:-7})${1}$(tput sgr0)"; }

# Prints a message with an Error label at the start, and a new line at the end.
__me() { printf "`__c "[Error]" 1` $@\n"; }

# Prints a message with an Info label at the start, and a new line at the end.
__mi() { printf "`__c "[Info]" 4` $@\n"; }

# Prints a message with an Ok label at the start, and a new line at the end.
__mo() { printf "`__c "[Ok]" 2` $@\n"; }

# Prints a message with a Warning label at the start, and a new line at the end.
__mw() { printf "`__c "[Warning]" 3` $@\n"; }

br() {
  __mi "Applying new changes";
  run_cmd ". $(dirname "${BASH_SOURCE[0]}")/index";
}

# Checks if a command is avaiable in your current session. Returns 0 if
# the command exists. Otherwise, shows an error message and returns 1 if 
# the command doesn't exist.
#     $1: Command.
cmd_exists() {
  if ! command -v $1 &> /dev/null; then 
    __me "`__c $1 6` command doesn't exist.";
    return 1;
  fi 
}

__is_cmd_enabled() {
  cmd_exists $1 > /dev/null 2>&1 && __mw "`__c $1 6` command is already enabled.";
}
# Enables Brew on the current terminal session.
ebrew() {
  __is_cmd_enabled brew && return 1;
  run_cmd "$(/opt/homebrew/bin/brew shellenv)";
  run_cmd "brew --version";
}

# Enables NVM on the current terminal session.
envm() {
  __is_cmd_enabled nvm && return 1;
  ebrew;
  run_cmd "export NVM_DIR=~/.nvm";
  run_cmd "source $(brew --prefix nvm)/nvm.sh";
  run_cmd "node --version";
}

epython() {
  __is_cmd_enabled python && return 1;
  ebrew;
  export PYENV_ROOT="$HOME/.pyenv"
  command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
  pyenv global 2;
  run_cmd "which python";
  run_cmd "python --version";
}


# Checks if a function has parameters. Returns 0 if there are paramters. 
# Otherwise returns 1.
#     $@: Parameters
has_parameters() {
  if [ $# -eq 0 ]; then
    __me "Missing parameters."; 
    return 1;
  fi
  return 0;
}

jira() {
  local branch=$1;
  [ -z "$1" ] && { 
    ! is_git_directory && return 1;
    branch=$(echo_current_branch);
  }
  [[ $branch =~ (^[A-Za-z]*-[0-9]*) ]] || {
    __me "Branch `__c $branch 3` is not a valid ticket name.";
    return 1;
  }
  run_cmd "open https://$jira_organization.atlassian.net/browse/${BASH_REMATCH[1]}";
}

# Prints a string with a light black foreground.
print_cmd() { 
  # awk $1=$1 removes extra spaces
  printf "\033[1;30m$ %s\n" "`echo "$@" | awk '$1=$1'`$(tput sgr0)"; 
}

question() {
  # https://stackoverflow.com/a/3232082/1054579
  read -r -p "`__c [Question] 5` $1 [y/`__c N 6`] " __response;
  [[ "$__response" =~ ^([yY][eE][sS]|[yY])$ ]] && return 0;
  return 1;
}

# Prints and runs a command.
#     $@: Command.
run_cmd() {
  print_cmd $@;
  eval $@;
  return $?;
}

# Prints and runs a command, setting its value to $__cmd_value.
#     $@: Command.
set_cmd_value() {
  print_cmd $@;
  # "eval" runs commands with pipes: https://stackoverflow.com/a/48098280/1054579
  __cmd_value=$(eval $@);
  [ -z "$__cmd_value" ] && return 1;
  return 0;
}

# Opens VSCode for the current directory. If $1 is specified, VSCode opens for
# the root of the git repository, or that path.
vsc() {
  local path="${1:-.}";
  local type="directory";
  is_git_directory "$path" > /dev/null 2>&1 && {
    path=$(cd $path; echo `git rev-parse --show-toplevel`;) 
    type=`__c "repository" 5`;
  }
  local directory="$(basename "`cd "$path"; pwd`")";
  __mi "Opening $(__c "$directory" 6) $type on VSCode.";
  run_cmd "code \"$path\"";
}
