# Color a string
#     $1: String.
#     $2: Number of the color.
#         0:black | 1:red     | 2:green | 3:yellow
#         4:blue  | 5:magenta | 6:cyan  | 7:gray
__c() { printf "%s" "$(tput setaf ${2:-7})${1}$(tput sgr0)"; }

# Prints a message with an Error label at the start, and a new line at the end.
__me() { printf "`__c "[Error]" 1` $@\n"; }

# Prints a message with an Info label at the start, and a new line at the end.
__mi() { printf "`__c "[Info]" 4` $@\n"; }

# Checks if a command is avaiable in your current session. Returns 0 if
# the command exists. Otherwise, shows an error message and returns 1 if 
# the command doesn't exist.
#     $1: Command.
cmd_exists() {
  if ! command -v $1 &> /dev/null; then 
    __me "Sorry, I didn't find `__c $1 6` command.";
    return 1;
  fi 
}

# Checks if a function has parameters. Returns 0 if there are paramters. 
# Otherwise returns 1.
#     $@: Parameters
has_parameters() {
  if [ $# -eq 0 ]; then
    __me "Sorry, I need parameters to continue"; 
    return 1;
  fi
  return 0;
}

# Prints a string with a light black foreground.
print_cmd() { 
  # awk $1=$1 removes extra spaces
  printf "\033[1;30m$ %s\n" "`echo "$@" | awk '$1=$1'`$(tput sgr0)"; 
}

# Prints and runs a command, setting its value to $__cmd_value.
#     $@: Command.
set_cmd_value() {
  print_cmd $@;
  unset __cmd_value;
  # "eval" runs commands with pipes: https://stackoverflow.com/a/48098280/1054579
  __cmd_value=$(eval $@);
  [ -z "$__cmd_value" ] && return 1;
  return 0;
}

# Prints and runs a command.
#     $@: Command.
run_cmd() {
  print_cmd $@;
  eval $@;
  return $?;
}




# Commits your changes
#    $1: Summary.
#    $2 (optional): Description.
gitc() {
  has_parameters $@ || return 1;
  get_current_branch || return 1;
  local commit_cmd="git commit -m \"$__cmd_value: $1\"";
  [ -n "$2" ] && { commit_cmd="$commit_cmd -m \"$2\""; }
  __mi "Commiting your changes";
  run_cmd "$commit_cmd" || return 1;
}

# Gets the name of the current branch on the current directory.
get_current_branch() {
  cmd_exists git || return 1;
  __mi "Getting the name of your current branch";
  set_cmd_value "git branch | grep \* | cut -d ' ' -f2" || return 1;
}